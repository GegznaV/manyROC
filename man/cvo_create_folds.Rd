% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cvo_create_folds.R
\name{cvo_create_folds}
\alias{cvo_create_folds}
\title{Create a cvo (cross-valitation object)}
\usage{
cvo_create_folds(data = NULL, stratify_by = NULL, block_by = NULL,
  k = folds, times = 1, seeds = NULL, kind = "L'Ecuyer-CMRG",
  mode = c("caret", "mlr")[1], returnTrain = c(TRUE, FALSE, "both")[1],
  predict = c("test", "train", "both")[1], folds = 5)
}
\arguments{
\item{data}{A data frame, that contains variables which names are denoted
by arguments \code{block_by} and by \code{stratify_by}.}

\item{stratify_by}{A vector or a name of factor variable in \code{data},
which levels will be used for \emph{stratification}. E.g.,
a vector with medical groups.}

\item{block_by}{A vector or a name of variable in \code{data}, that
contains identification codes/numbers (ID). These codes
will be used for blocking.}

\item{k, folds}{(\code{integer})\cr A number of folds, default \code{k = 5}.}

\item{times}{(\code{integer})\cr a number of repetitions for
repeated cross-validation.}

\item{seeds}{(vector of integers | \code{NULL})\cr Seeds for random number
            generator for each repetition.\cr
            If \code{seeds = NULL} random seeds are generated.\cr
            If number of repetitions is
            greater than number of provided seeds, random seeds are
            generated and added to the provided ones. The first seed will
            be used to ensure reproducibility of the randomly generated
            seeds.\cr

             (See \code{\link[base]{set.seed}} for more information about
             random number generation).}

\item{kind}{(\code{character} | \code{NULL})\cr The kind of (pseudo)random
number generator. Default is \code{"L'Ecuyer-CMRG"} as it
provides the basis for the multiple streams used in package
\pkg{parallel}.
More information at \code{\link[base]{set.seed}}.}

\item{mode}{(\code{character})\cr Either \pkg{caret}-like or \pkg{mlr}-like
cvo object. \bold{This option is not implemented yet!}}

\item{returnTrain}{(\code{logical} | \code{character}) \cr
If \code{TRUE}, returns indices of variables in
a training set (\pkg{caret} style).
If \code{FALSE}, returns indices of variables in
a test set (\pkg{caret} style).
If \code{"both"}, returns indices of
variables in both training and test sets (\pkg{mlr} style).}

\item{predict}{[\code{character(1)}]\cr
What to predict during resampling: \dQuote{train}, \dQuote{test} or \dQuote{both} sets.
Default is \dQuote{test}.}
}
\value{
(\code{list}) A list of folds. In each fold there are indices
        observations. The structure of outputs is the similar to one
        created with either function \code{\link[caret]{createFolds}()}
        from \pkg{caret} or function
        \code{\link[mlr]{makeResampleInstance}()} in \pkg{mlr}.
}
\description{
\bold{[DESCRIBTION MUST BE UPDATED]}\cr
}
\details{
[!] Create indices of folds with blocking and stratification (cvo object)
Create indices of folds with blocking and stratification for (repeated)
k-fold cross-validation. \cr
Function \code{cvo_create_folds} randomly divides observations into
folds that are used for (repeated) k-fold cross-validation. In these
 folds observations are:
\enumerate{
     \item \bold{blocked} by values in variable \code{block_by}
     (i.e. observations with the same "ID" or other kind of blocking factor
     are treated as one unit (a block) and are always in the same fold);
     \item \bold{stratified} by levels of factor variable \code{stratify_by}
      (the proportions of these grouped units of observations per each
      group (level) are kept approximately constant throughout all folds).
 }
}
\note{
If \code{k} is such big, that some folds have no observations of
      a certain group (i.e., level in \code{stratify_by}), an error
      is returned. In that case smaller value of \code{k} may be
      recommended.
}
\examples{
library(multiROC)

# [!!!] Load data
DataSet1 <-data.frame(ID = rep(1:20, each = 2),
                           gr = gl(4, 10, labels = LETTERS[1:4]),
                           .row = 1:40)

# Explore data
     str(DataSet1)

     table(DataSet1[,c("gr","ID")])

     summary(DataSet1)


# Explore functions
     nFolds = 5

# If variables of data frame are provided:
     Folds1_a <- cvo_create_folds(data = DataSet1,
                              stratify_by = "gr", block_by = "ID",
                               k = nFolds, returnTrain = FALSE)
     # str(Folds1_a)
     cvo_test_bs(Folds1_a, "gr", "ID", DataSet1)

# If "free" variables are provided:
     Folds1_b <- cvo_create_folds(stratify_by = DataSet1$gr,
                                  block_by = DataSet1$ID,
                                  k = nFolds,
                                  returnTrain = FALSE)
     # str(Folds1_b)
     cvo_test_bs(Folds1_b, "gr", "ID", DataSet1)

# Not blocked but stratified
     Folds1_c <- cvo_create_folds(stratify_by = DataSet1$gr,
                                  k = nFolds,
                                  returnTrain = FALSE)
     # str(Folds1_c)
     cvo_test_bs(Folds1_c, "gr", "ID", DataSet1)

# Blocked but not stratified
     Folds1_d <- cvo_create_folds(block_by = DataSet1$ID,
                                  k = nFolds,
                                  returnTrain = FALSE)
     # str(Folds1_d)
     cvo_test_bs(Folds1_d, "gr", "ID", DataSet1)


}
\seealso{
Function \code{\link[caret]{createFolds}} from package
         \pkg{caret}. \cr
         Function \code{\link[mlr]{makeResampleInstance}} from package
         \pkg{mlr}. \cr
Test if folds are blocked and stratified \code{\link{cvo_test_bs}}
}
\author{
Vilmantas Gegzna
}
